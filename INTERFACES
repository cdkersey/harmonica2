const unsigned W(8), WW(CLOG2(W)), L(8), LL(CLOG2(L)), N(32),
               R(32), RR(CLOG2(R)), LINE(16);

enum Tstate {
  TS_USER, TS_DIVERGENT_BR, TS_PENDING_INT, TS_KERNEL, N_TSTATES
};

const unsigned SS(CLOG2(N_TSTATES));

Basic warp variables [warp]: State, PC, active mask

typedef ag<STP("state"), bvec<SS>,
        ag<STP("pc"), bvec<N>,
        ag<STP("active"), bvec<W> > > > warp_t;

Predicate read values [pval]: inst pred val, param pval 0, param pval 1

typedef ag<STP("pmask"), bvec<L>,
        ag<STP("pval0"), bvec<L>,
        ag<STP("pval1"), bvec<L> > > > pval_t;

Writeback predicate values [wbpval]: writeback mask, wb pred val, pred dest ID

typedef ag<STP("mask"), bvec<L>,
        ag<STP("val"), bvec<L>,
        ag<STP("dest"), bvec<RR> > > > pwb_t;

Register read values [rval]: rval0, rval1, rval2

typedef ag<STP("val0"), vec<L, bvec<N> >,
        ag<STP("val1"), vec<L, bvec<N> >,
        ag<STP("val2"), vec<L, bvec<N> > > > > rval_t;

Writeback register values [wbrval]: writeback mask, wb reg val, reg dest ID

typedef ag<STP("mask"), bvec<L>,
        ag<STP("val"), vec<L, bvec<N> >,
        ag<STP("dest"), bvec<RR> > > > rwb_t;



Sched->Fetch     - [warp]

typedef flit_t<warp_t> sched_fetch_t;

Fetch->Predicate - [warp], IR

typedef flit_t<ag<STP("warp"), warp_t,
               ag<STP("ir"), bvec<N> > > > fetch_pred_t;

Predicate->Reg   - [warp], IR, [pval]

typedef flit_t<ag<STP("warp"), warp_t,
               ag<STP("ir"),   bvec<N>,
               ag<STP("pval"), pval_t> > > > pred_reg_t;

Reg->Dispatch, Dispatch->FU    - [warp], IR, [pval], [rval]

typedef flit_t<ag<STP("warp"), warp_t,
               ag<STP("ir"), bvec<N>,
               ag<STP("pval"), pval_t,
               ag<STP("rval"), rval_t> > > > > reg_func_t;

FU->Arbiter, Arbiter->Splitter - [warp], [wbrval], [wbpval]

typedef flit_t<ag<STP("warp"), warp_t,
               ag<STP("rwb"), rwb_t,
               ag<STP("pwb"), pwb_t> > > > func_sched_t;

Splitter->Register - [wbrval]

typedef flit_t<rwb_t> splitter_reg_t;

Splitter->Predicate - [wbpval]

typedef flit_t<pwb_t> splitter_pred_t;

Splitter->Sched - [warp]

typedef flit_t<warp> splitter_sched_t;

